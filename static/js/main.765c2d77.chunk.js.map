{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","query","setQuery","initialUrl","initialData","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","useEffect","a","axios","result","fetchData","useDataApi","hits","doFetch","onSubmit","event","preventDefault","type","value","onChange","target","map","item","href","title","objectID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA0EeA,MA3Cf,WACE,MAA0BC,mBAAS,mBAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EA9BiB,SAACC,EAAYC,GAC9B,MAAwBJ,mBAASI,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBN,mBAASG,GAA/B,mBAAOI,EAAP,KAAYC,EAAZ,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAA8BV,oBAAS,GAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KAqBA,OAnBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DAChBF,GAAW,GACXF,GAAa,GAFG,kBAKOK,IAAMR,GALb,OAKRS,EALQ,OAOdV,EAAQU,EAAOX,MAPD,gDASdO,GAAW,GATG,QAYhBF,GAAa,GAZG,yDAAH,oDAefO,KACC,CAACV,IAEG,CAAC,CAAEF,OAAMI,YAAWE,WAAWH,GAKUU,CAC9C,mDACA,CAAEC,KAAM,KAFV,0BAASd,EAAT,EAASA,KAAMI,EAAf,EAAeA,UAAWE,EAA1B,EAA0BA,QAAWS,EAArC,KAKA,OACE,eAAC,WAAD,WACE,uBACEC,SAAU,SAAAC,GACRF,EAAQ,6CAAD,OACwCnB,IAG/CqB,EAAMC,kBANV,UASE,uBACEC,KAAK,OACLC,MAAOxB,EACPyB,SAAU,SAAAJ,GAAK,OAAIpB,EAASoB,EAAMK,OAAOF,UAE3C,wBAAQD,KAAK,SAAb,uBAGDb,GAAW,2DAEXF,EACC,8CAEA,6BACGJ,EAAKc,KAAKS,KAAI,SAAAC,GAAI,OACjB,6BACE,mBAAGC,KAAMD,EAAKtB,IAAd,SAAoBsB,EAAKE,SADlBF,EAAKG,mBCpDXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.765c2d77.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n \nconst useDataApi = (initialUrl, initialData) => {\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n \n      try {\n        const result = await axios(url);\n \n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n \n      setIsLoading(false);\n    };\n \n    fetchData();\n  }, [url]);\n \n  return [{ data, isLoading, isError }, setUrl];\n};\n \nfunction App() {\n  const [query, setQuery] = useState('Search For News');\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(\n    'https://hn.algolia.com/api/v1/search?query=axios',\n    { hits: [] },\n  );\n \n  return (\n    <Fragment>\n      <form \n        onSubmit={event => {\n          doFetch(\n            `http://hn.algolia.com/api/v1/search?query=${query}`,\n          );\n \n          event.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      \n      {isError && <div>Something went wrong ...</div>}\n \n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}